{"version":3,"sources":["context.js","TodoItem.js","TodoList.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","title","id","completed","dispatch","useContext","cls","push","className","join","type","checked","onChange","payload","onClick","TodoList","todos","map","item","key","state","action","Date","now","todo","filter","App","useReducer","reducer","JSON","parse","localStorage","getItem","useState","todoTitle","setTodoTitle","useEffect","setItem","stringify","Provider","value","event","target","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAGaA,EAAUC,IAAMC,gBCAd,SAASC,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,UACpCC,EAAYC,qBAAWR,GAAvBO,SAEDE,EAAM,CAAC,QAIb,OAHGH,GACDG,EAAIC,KAAK,aAGT,wBAAIC,UAAWF,EAAIG,KAAK,MACtB,+BACE,2BACEC,KAAK,WACLC,QAASR,EACTS,SAAU,kBAAMR,EAAS,CACvBM,KAAM,SACNG,QAASX,OAGb,8BAAOD,GACf,uBACUO,UAAU,0BACVM,QAAW,kBAAMV,EAAS,CACxBM,KAAM,SACNG,QAASX,MAJrB,YCnBe,SAASa,EAAT,GAA4B,IAATC,EAAQ,EAARA,MAChC,OACE,4BACGA,EAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAClB,EAAD,eAAUmB,IAAKD,EAAKhB,IAAQgB,Q,WCNtC,WAAUE,EAAOC,GAC5B,OAAQA,EAAOX,MACX,IAAK,MACD,MAAM,GAAN,mBACOU,GADP,CAEI,CACIlB,GAAIoB,KAAKC,MACTtB,MAAOoB,EAAOR,QACdV,WAAW,KAGnB,IAAK,SACD,OAAOiB,EAAMH,KAAK,SAAAO,GAId,OAHGA,EAAKtB,KAAOmB,EAAOR,UAClBW,EAAKrB,WAAaqB,EAAKrB,WAEpBqB,KAEX,IAAK,SACD,OAAOJ,EAAMK,QAAO,SAAAD,GAAI,OAAIA,EAAKtB,KAAMmB,EAAOR,WAC1D,QACI,OAAOO,ICfJ,SAASM,IAAQ,IAAD,EACLC,qBAAWC,EAASC,KAAKC,MAChDC,aAAaC,QAAQ,WAFO,mBACxBZ,EADwB,KACjBhB,EADiB,OAGI6B,mBAAS,IAHb,mBAGvBC,EAHuB,KAGZC,EAHY,KAO9BC,qBAAU,WACXL,aAAaM,QAAQ,QAASR,KAAKS,UAAUlB,MAEzC,CAACA,IA4BD,OACE,kBAACvB,EAAQ0C,SAAT,CAAkBC,MAAO,CACxBpC,aAED,yBAAKI,UAAU,aACb,wCAEE,yBAAKA,UAAU,eACb,2BACAE,KAAK,OACL8B,MAAON,EACPtB,SAAU,SAAA6B,GAAK,OAAIN,EAAaM,EAAMC,OAAOF,QAC7CG,WAvCK,SAAAF,GACG,UAAdA,EAAMtB,MACPf,EAAS,CACRM,KAAM,MACNG,QAASqB,IAIVC,EAAa,QAiCN,6CAGF,kBAACpB,EAAD,CAAUC,MAAOI,M,MCjDPwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAACxB,EAAD,MAASyB,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.754bbfd1.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport const Context = React.createContext()","import React, {useContext} from 'react'\nimport {Context} from './context'\n\nexport default function TodoItem({title, id, completed}) {\n  const {dispatch} = useContext(Context)\n\n  const cls = ['todo']\n  if(completed){\n    cls.push('completed')\n  }\n  return (\n    <li className={cls.join(' ')}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={() => dispatch({\n            type: 'toggle',\n            payload: id\n          })}\n        />\n        <span>{title}</span>\n<i\n          className=\"material-icons red-text\"\n          onClick = {() => dispatch({\n            type: 'remove',\n            payload: id\n          })}\n        >\n          delete\n        </i>\n        \n      </label>\n    </li>\n  )\n}\n        ","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default function TodoList({todos}) {\n  return (\n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\n    </ul>\n  )\n}","export default function (state, action) {\n    switch (action.type) {\n        case 'add':\n            return[\n                ...state,\n                {\n                    id: Date.now(),\n                    title: action.payload,\n                    completed: false\n                }\n            ]\n            case 'toggle':\n                return state.map( todo => {\n                    if(todo.id === action.payload){\n                        todo.completed =! todo.completed\n                    }\n                    return todo\n                })\n                case 'remove':\n                    return state.filter(todo => todo.id!== action.payload)\n        default:\n            return state\n    }\n}\n    \n        ","import React, {useState, useEffect, useReducer} from 'react'\nimport TodoList from './TodoList'\nimport {Context} from './context'\nimport reducer from './reducer'\n\n\nexport default function App () {\nconst [state, dispatch] = useReducer(reducer, JSON.parse\n  (localStorage.getItem('todos'))) \n const [todoTitle, setTodoTitle] = useState('')\n\n\n \n useEffect(() => {\nlocalStorage.setItem('todos', JSON.stringify(state))\n\n }, [state])\n const addTodo = event =>{\n   if(event.key === 'Enter'){\n     dispatch({\n      type: 'add',\n      payload: todoTitle\n\n     })\n     \n     setTodoTitle('')\n   }\n } \n\n//  const removeTodo = id => {\n//    setTodos(todos.filter(todo => {\n//      return todo.id !== id\n//    }))\n//  }\n\n// const toggleTodo = id => {\n//   setTodos(todos.map(todo =>{\n//     if(todo.id === id){\n//       todo.completed = !todo.completed \n//     }\n//     return todo\n//   }))\n// }\n\n    return (\n      <Context.Provider value={{\n       dispatch\n      }}>\n      <div className=\"container\">\n        <h1>Todo app</h1>\n\n          <div className=\"input-field\">\n            <input \n            type=\"text\"\n            value={todoTitle}\n            onChange={event => setTodoTitle(event.target.value)}\n            onKeyPress={addTodo}\n             />\n            <label>Todo name</label>\n          </div>\n\n          <TodoList todos={state} />\n      </div>\n      </Context.Provider>\n    );\n  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}